/**
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#ifndef _ALEXAEXT_TYPES_H
#define _ALEXAEXT_TYPES_H

#include <cstddef>
#include <functional>
#include <string>

namespace alexaext {

/**
 * Uniquely identifies an extension session. A session is a group of related activities for which
 * sharing of state is allowed (proper care must be taken to protect sensitive data when defining
 * session boundaries). The lifetime of each activity is bound by the lifetime of its
 * enclosing session. For example, a typical session for APL rendering activities is an Alexa Skills
 * Kit (ASK) skill session. Nesting sessions is not allowed.
 *
 * Session identifiers are intended to be opaque values. They are typically generated by
 * the execution environment. Extensions should not make assumptions about their format or attempt
 * to parse them to extract information. For example, there is no guarantee that a session
 * identifier would relate to any existing Alexa identifier.
 */
using SessionId = std::string;

/**
 * Uniquely identifies an activity that requested the extension. For example, a common activity
 * is an APL rendering task for a given document (the same document can be used by more than one
 * activity).
 *
 * Activity identifiers are intended to be opaque values. Extensions should not make assumptions
 * about their format or attempt to parse them to extract information. For example, there is
 * no guarantee that an activity identifier would relate to any existing Alexa identifier or
 * APL token (for APL rendering activities).
 */
using ActivityId = std::string;

} // namespace alexaext

#endif // _ALEXAEXT_TYPES_H
