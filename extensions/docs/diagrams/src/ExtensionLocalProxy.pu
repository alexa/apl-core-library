@startuml LocalExtensionProxy

title
<u><b>alexaext: ExtensionProxy In-Process Extensions</b></u>
<i>secondary, alternate, and negative code paths removed for simplicity</i>

 'blank title line for spacing
end title

skinparam sequence {
ParticipantBorderColor #808080
}
skinparam responseMessageBelowArrow true

box "\nRuntime Process\n" #daedf4
participant "<Actor>" as Actor #LightBlue
participant "LocalExtensionProxy" as Proxy
participant "Extension" as Extension
end box

note right Actor #LightGray: Actor may be a Provider or Execution Environment
note over Extension #LightGray: Proxy/Extension calls are direct

== Proxy Creation ==

autonumber
group alt ExtensionFactory [lazy - preferred]
    Actor <-> Proxy: create:Proxy\n<font color=gray>(uri:string, extensionFActory:function)
else assigned 
    Actor <-> Proxy: create:Proxy\n<font color=gray>(uri:string, extension:ExtensionFActory)
end
Actor <-> Proxy : registerEventCallback:void \n<font color=gray>(callback:EventCallback)
Actor <-> Proxy : registerLiveDataCallback:void \n<font color=gray>(callback:LiveDataCallback)

autonumber stop

...
== Extension Initialization ==

autonumber

note over Actor,Proxy #LightGray
  "prepare" is called to notify the proxy of intended extension use. Proxy
  implementations may ignore, defer, construct the extension, or initialize
  extension resources.  The proxy should not depend on on this call.
end note
Actor -> Proxy: prepare:void  \n<font color=gray>(uri:string)
activate Actor
activate Proxy
activate Proxy
return
deactivate Actor

group alt ExtensionFactory [lazy]
    Proxy <-> Extension: create:Extension \n<font color=gray>(uri:string)
    activate Extension
end
Proxy <-> Extension : registerEventCallback:void  \n<font color=gray>(proxyCB:EventCallback)
Proxy <-> Extension : registerLiveDataCallback:  \n<font color=gray>void(proxyCb:EventCallback)
deactivate Extension
deactivate Proxy
deactivate Actor
autonumber stop

...
== Extension Registration ==

autonumber
Actor --> Proxy: getRegistration:void \n<font color=gray>({RegistrationRequest:json}, \n<font color=gray>callback:RegistrationCallback)
activate Actor
activate Proxy
activate Proxy
return
deactivate Actor
Proxy -> Extension: getRegistration:void  \n<font color=gray>({RegistrationRequest:json},  \n<font color=gray>callback:RegistrationCallback)
activate Extension
Extension -> Proxy: callback:void \n<font color=gray>({RegistrationSuccess:json})
deactivate Extension
activate Actor
Proxy --> Actor: callback:void \n<font color=gray>({RegistrationSuccess:json})
deactivate Proxy
deactivate Actor
autonumber stop

...
== Extension Command ==

note over Proxy #LightGray
  "invokeCommand" returns the status of the call, the Command processing
  result is returned asynchronously
end note
Actor --> Proxy: invokeCommand:bool \n<font color=gray>({Command:json} \n<font color=gray>callback:CommandCallback)
activate Actor
activate Proxy
activate Proxy
return true
deactivate Actor
Proxy -> Extension: invokeCommand:bool \n<font color=gray>({Command:json},  \n<font color=gray>callback:CommandCallback)
deactivate Proxy
activate Extension
Extension -> Extension: processCommand:bool
Extension -> Proxy: callback:void \n<font color=gray>({CommandSucces:json})
deactivate Extension
activate Proxy
activate Actor
Proxy --> Actor: callback:void \n<font color=gray>(CommandSuccess):json
deactivate Proxy
deactivate Actor
autonumber stop

...
== Extension Event / LiveData ==

autonumber
Extension -> Extension: internalEvent
activate Extension
Extension -> Proxy: callback:void \n<font color=gray>({Event:json})
deactivate Extension
activate Proxy
activate Actor
Proxy -> Actor: callback:void  \n<font color=gray>({Event:json})
deactivate Proxy
deactivate Actor
autonumber stop

@enduml
